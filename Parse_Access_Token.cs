// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Parser;
//
//    var accessToken = AccessToken.FromJson(jsonString);

namespace Parser
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class AccessToken
    {
        [JsonProperty("access_token", NullValueHandling = NullValueHandling.Ignore)]
        public string AccessTokenAccessToken { get; set; }

        [JsonProperty("expires_in", NullValueHandling = NullValueHandling.Ignore)]
        public long? ExpiresIn { get; set; }

        [JsonProperty("expires_at", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? ExpiresAt { get; set; }

        [JsonProperty("token_type", NullValueHandling = NullValueHandling.Ignore)]
        public string TokenType { get; set; }

        [JsonProperty("refresh_token", NullValueHandling = NullValueHandling.Ignore)]
        public string RefreshToken { get; set; }

        [JsonProperty("refresh_expires", NullValueHandling = NullValueHandling.Ignore)]
        public long? RefreshExpires { get; set; }

        [JsonProperty("refresh_expires_at", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? RefreshExpiresAt { get; set; }

        [JsonProperty("account_id", NullValueHandling = NullValueHandling.Ignore)]
        public string AccountId { get; set; }

        [JsonProperty("client_id", NullValueHandling = NullValueHandling.Ignore)]
        public string ClientId { get; set; }

        [JsonProperty("internal_client", NullValueHandling = NullValueHandling.Ignore)]
        public bool? InternalClient { get; set; }

        [JsonProperty("client_service", NullValueHandling = NullValueHandling.Ignore)]
        public string ClientService { get; set; }

        [JsonProperty("lastPasswordValidation", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? LastPasswordValidation { get; set; }

        [JsonProperty("perms", NullValueHandling = NullValueHandling.Ignore)]
        public Perm[] Perms { get; set; }

        [JsonProperty("app", NullValueHandling = NullValueHandling.Ignore)]
        public string App { get; set; }

        [JsonProperty("in_app_id", NullValueHandling = NullValueHandling.Ignore)]
        public string InAppId { get; set; }
    }

    public partial class Perm
    {
        [JsonProperty("resource", NullValueHandling = NullValueHandling.Ignore)]
        public string Resource { get; set; }

        [JsonProperty("action", NullValueHandling = NullValueHandling.Ignore)]
        public long? Action { get; set; }
    }

    public partial class AccessToken
    {
        public static AccessToken FromJson(string json) => JsonConvert.DeserializeObject<AccessToken>(json, Parser.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this AccessToken self) => JsonConvert.SerializeObject(self, Parser.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
